plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = "battletowers"
version = project.mod_version + "-" + project.minecraft_version

repositories {
    maven { url 'https://jitpack.io' }
    maven { url = "https://minecraft.curseforge.com/api/maven" }
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // spawner fixes (TAKEN OUT, FIXED IN 1.17)

    // cloth
    modImplementation include("com.github.Draylar.omega-config:omega-config-base:${project.config_version}")


    // structure helpers for advanced jigsaw data
    modImplementation 'com.github.kvverti:structure-helpers:3.1.0'
    include 'com.github.kvverti:structure-helpers:3.1.0'

    // building assistance
    //modImplementation 'com.github.Draylar:staff-of-building:1.2.3-1.16.2'

    // static content
    modImplementation 'com.github.Draylar:static-content:1.0.2'
    include 'com.github.Draylar:static-content:1.0.2'
    modImplementation ("io.github.cottonmc:StaticData:1.1.2") { // ?????????????????????
        exclude group: "net.fabricmc.fabric-api"
    }
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
processResources {
    /*inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }

     */

    doLast {

        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0

        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }

        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.fork = true
    options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}